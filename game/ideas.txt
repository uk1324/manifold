Ray tracing to choose a point to go to on the surface from the fly mode.
After the triangle is hit the barycentric coordinates of a point inside the triangle can be calculated and interpolated to get the uv coordinate. This is just the approximate coordinate. 
Rendering the uv coordinates to a texture and then reading them would achive the same approximate result.

If you could parametrize each part of the surface as x3 = f(x1, x2) (basically just a regular region, thesre are also called monge patches i think?) where x1, x2, x3 are x, y, z in any order (that is you can choose the axis on which you project to). Then you can find the inverse of a point by just projecting it onto a set of axes.
Because the inverse is easy to find it should also be possible to switch between the patches.
For differential equations you would also need to map between the tangent spaces.
If you have some tangent in P1 then you can map it into the tangent space of the manifold. Then you can represent the vector in the tanget space in the tangent basis of P2.
The issue with calculating the coordinates of the tangent vector in the basis of P2 is that you need to calculate the inverse of a 3x2 matrix. Instead of doing that you can represent all the vectors in some basis of the tangent space and then invernt a 2x2 matrix. Obviously representing the vectors in some basis is just the same problem again, but if the chosen basis is orthonormal then you can do it easily. You can construct such a basis by picking a random vector (could be one from the P2 basis) and then calculating the cross product of it with the normal to the tangent space.
In the case of a x3 = f(x1, x2) type patch the tangent in the P2 is just (v1, v2).

A nice parametrization of the sphere.
You can map between the sphere and a cube using the map C -> S that just normalizes the position on the cube. The inverse just finds the intrsection of the ray with a cube. 
You can easily create a coordinate on a cube by just unwrapping it into a net.
This parametrization is nice, because you can easily map between the sphere and the cube and you know which coordinate chart to switch to without having to do inverses (because the topology of the cube is simple).

Another possible parametrization is f(u, v) = (u, v, sqrt(1-u^2-v^2)), the issue with this map is that there are overlaps, between the regions.

If you know that there always exists a patch that covers a point on the surface you could try steping the movement forward and if you go out of the current patch you try to find another patch and try to move again. There would probably be cases where moving forward would always step out of the current patch (Don't have a concreate example, but maybe try something with a non-convex boundary or maybe something at the intersection of 3 patches). With the nice parametrization of the sphere it is obvious (well in the case of larger steps there are probably some edge cases) which patch to transition to.
If the steps are small enought so that you can gurantee that at each step to go from part of the surface that is convered by patch 1 to a part of the surface that is convered by patch 2 you have to go though the part of the surface that is convered by the intersection of the 2 patches then the transitions are going to be simpler.
If should be emphesized that in general the patches lie in different coordinate systems (in the sense that for example one part would use gnomonic projection and another stereographic projection, that is they use inconsistent projection) in the case of the nice parametrization of the sphere a single coordinate system (on a bunch of squares glued together) is used which is nice.

Actually switching the vector also needs to be handled.


Show the vector flow field on the surface. Not sure which direction should the initial condition give. I guess it would only make sense to display the change in the velocity at each point, but that depends on the current velocity.

In some cases the Gauss map can be used to give a parametrization. 
https://math.stackexchange.com/questions/379254/when-is-the-gauss-map-on-a-surface-bijective
Could then further projective the sphere onto the cube to get a coordinate system.


https://math.stackexchange.com/questions/389196/prove-that-gauss-map-on-m-is-surjective

Add some cool looking skybox

Editor for vector fields on the manifold to visualize the poincare hopf theorem.

A vector field on a manifold can be consotructed by projecting the vector field in space onto the manifold.

By the Helmholtz decomposition any field can be made from irrotational and solenoidal fields so could try constructing the fields from these fields.

Could use billboards to indicate sources and sinks.

The vector field can also be visualized using a particle system.

Random vector fields can be generated using procedural noise.

Fluid flows can also be used to generate flows in 3d.