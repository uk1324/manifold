Ray tracing to choose a point to go to on the surface from the fly mode.
After the triangle is hit the barycentric coordinates of a point inside the triangle can be calculated and interpolated to get the uv coordinate. This is just the approximate coordinate. 
Rendering the uv coordinates to a texture and then reading them would achive the same approximate result.

If you could parametrize each part of the surface as x3 = f(x1, x2) (basically just a regular region, thesre are also called monge patches i think?) where x1, x2, x3 are x, y, z in any order (that is you can choose the axis on which you project to). Then you can find the inverse of a point by just projecting it onto a set of axes.
Because the inverse is easy to find it should also be possible to switch between the patches.
For differential equations you would also need to map between the tangent spaces.
If you have some tangent in P1 then you can map it into the tangent space of the manifold. Then you can represent the vector in the tanget space in the tangent basis of P2.
The issue with calculating the coordinates of the tangent vector in the basis of P2 is that you need to calculate the inverse of a 3x2 matrix. Instead of doing that you can represent all the vectors in some basis of the tangent space and then invernt a 2x2 matrix. Obviously representing the vectors in some basis is just the same problem again, but if the chosen basis is orthonormal then you can do it easily. You can construct such a basis by picking a random vector (could be one from the P2 basis) and then calculating the cross product of it with the normal to the tangent space.
In the case of a x3 = f(x1, x2) type patch the tangent in the P2 is just (v1, v2).

A nice parametrization of the sphere.
You can map between the sphere and a cube using the map C -> S that just normalizes the position on the cube. The inverse just finds the intrsection of the ray with a cube. 
You can easily create a coordinate on a cube by just unwrapping it into a net.
This parametrization is nice, because you can easily map between the sphere and the cube and you know which coordinate chart to switch to without having to do inverses (because the topology of the cube is simple).

Another possible parametrization is f(u, v) = (u, v, sqrt(1-u^2-v^2)), the issue with this map is that there are overlaps, between the regions.

If you know that there always exists a patch that covers a point on the surface you could try steping the movement forward and if you go out of the current patch you try to find another patch and try to move again. There would probably be cases where moving forward would always step out of the current patch (Don't have a concreate example, but maybe try something with a non-convex boundary or maybe something at the intersection of 3 patches). With the nice parametrization of the sphere it is obvious (well in the case of larger steps there are probably some edge cases) which patch to transition to.
If the steps are small enought so that you can gurantee that at each step to go from part of the surface that is convered by patch 1 to a part of the surface that is convered by patch 2 you have to go though the part of the surface that is convered by the intersection of the 2 patches then the transitions are going to be simpler.
If should be emphesized that in general the patches lie in different coordinate systems (in the sense that for example one part would use gnomonic projection and another stereographic projection, that is they use inconsistent projection) in the case of the nice parametrization of the sphere a single coordinate system (on a bunch of squares glued together) is used which is nice.

Actually switching the vector also needs to be handled.


Show the vector flow field on the surface. Not sure which direction should the initial condition give. I guess it would only make sense to display the change in the velocity at each point, but that depends on the current velocity.

In some cases the Gauss map can be used to give a parametrization. 
https://math.stackexchange.com/questions/379254/when-is-the-gauss-map-on-a-surface-bijective
Could then further projective the sphere onto the cube to get a coordinate system.


https://math.stackexchange.com/questions/389196/prove-that-gauss-map-on-m-is-surjective

Add some cool looking skybox

Editor for vector fields on the manifold to visualize the poincare hopf theorem.

A vector field on a manifold can be consotructed by projecting the vector field in space onto the manifold.

By the Helmholtz decomposition any field can be made from irrotational and solenoidal fields so could try constructing the fields from these fields.

Could use billboards to indicate sources and sinks.

The vector field can also be visualized using a particle system.

Random vector fields can be generated using procedural noise.

Fluid flows can also be used to generate flows in 3d.

Could do a visualization of bifuractions. Give examples. For example create an slider that allows you to move 2 sources untill they merge.

Could find the stationary points by using raymarching in the uv domain.

To create a resizable torus mesh could store the angle at each vertex and scale based on that.

https://physics.stackexchange.com/questions/755845/lie-group-generators-exponential-map


{
	https://en.wikipedia.org/wiki/Differential_geometry_of_surfaces#Regular_surfaces_in_Euclidean_space
	https://en.wikipedia.org/wiki/Lie_bracket_of_vector_fields
	If you have a vector field then you can consider it as a function from R^n -> T_p or R^n -> R^n. You can also assocative it with a first oreder differential operator that takes the derivative in a direction of the vector field.
	So let
	a e0 + b e1 + c e2
	be some vector field. 
	Then the operator would be
	a d/de0 + b d/de1 + c d/e2
	where d/dei denotes taking the directional derivative in the direction of ei.

	Then if you have functions g, h on some manifold and a vector field X on the manifold and let Xf be the derivative of f in the direction of X then
	X(gh) = (Xg)h + g(Xh)
	so X interpreted as a differential operator is a derivation.
	The order doesn't matter multiplication of functions is commutative

	It turns out that [X, Y] = XY - YX is also a first order differential operator

	The vector fields interpreted as differential operators with the operation [X, Y] form a Lie algebra.
}

{
	https://www.youtube.com/watch?v=csolG83gCV8

	If you have some infinitesmial change from the identity then the matrix for this change will be I + X. If you continually apply smaller and smaller changes you get (I + X/n)^n. Going to infinity you get the transformation generated by the infinitesmial transformation.

	The orthogonal group is defined by the constraint X X^T = I.
	If we have some curve X(t) then differentiating we get
	X' X^T + X (X^T)' = 0
	so that
	X' X^T = -(X' X_T )^T
	This means that the matricies
	X' X^T are skew symmetric.

	If X(0) = id then evaluating this formula at zero we get that X'(0) which is a tangent at identity is a skew symmetric matrix.

	In general for any curve on the group we have that
	X' X^T = A
	Where A is some skew symmetric matrix.
	From this we get the differential equation
	X' = A X
	where the matrix A depends on t.
	If the matrix A is constant and we choose the inital condition X(0) = I, we get that
	X = exp(At)

	https://math.stackexchange.com/questions/3859971/when-is-the-exponential-map-injective-surjective
	For a compact connected Lie group the exponential map from the tangent space at the identity to the group is surjective.
	If the group is not connected. For example the group of orthogonal matricies has 2 connected components the ones of det = 1 and ones of det = -1. Because the exponential map is continous it can't just jump to the det = -1 component.
	For GL(n) it is also surjective, even though it is not compact.

	You can treat the exponential map as a kind of plus. That is treat the manifold locally as a kind of vector space. Obviously in general these things are not commutative, but it works out if you make the changes smaller and smaller.
	https://youtu.be/csolG83gCV8?si=voniLSUPIjxRk7qR&t=5168

}


"Mathematical methods of classical mechanics"
A lie group is a groupd that is a differentiable manifold with the product and inverse being differentiable.

The tangent space at the identity element e has a natural Lie algebra structure.

For each tangent vector at TM_e there is a one parameter subgroup (or basically a curve) A_t with the given velocity vector at the point e.

If you have 2 subgroups A_t, B_t
then the degree of non commutatvity of the subgroups is measured by A_t B_s A_{-t} B_{-s}

https://en.wikipedia.org/wiki/Lie_algebra#Relation_to_Lie_groups
https://en.wikipedia.org/wiki/Lie%27s_third_theorem
https://en.wikipedia.org/wiki/Baker%E2%80%93Campbell%E2%80%93Hausdorff_formula
https://en.wikipedia.org/wiki/Exponential_map_(Lie_theory)#Elementary_properties_of_the_exponential

Shapes {
	To add: {
		https://en.wikipedia.org/wiki/Dupin_cyclide
		https://en.wikipedia.org/wiki/Enneper_surface
		https://en.wikipedia.org/wiki/Seashell_surface
		https://en.wikipedia.org/wiki/Klein_bottle
	}
	

	Constructions: {
		https://en.wikipedia.org/wiki/Channel_surface
		https://en.wikipedia.org/wiki/Ruled_surface
		https://en.wikipedia.org/wiki/Evolute
	}
	
	https://en.wikipedia.org/wiki/Tubular_neighborhood

	https://en.wikipedia.org/wiki/Knot_complement

	https://en.wikipedia.org/wiki/Minimal_surface

	https://en.wikipedia.org/wiki/Cartan%E2%80%93Karlhede_algorithm
}

Could show singular points of curves like 
https://en.wikipedia.org/wiki/Pl%C3%BCcker%27s_conoid
https://en.wikipedia.org/wiki/Conoid#Examples

Visualization of the normal map on a curve.
One a surface could draw a curve on the surface around a point and calculate it's normal map. Could also color the curve based on the current t value. Could also show off the normal maps of singular curves. The tangent and binormal indicatrix could also be visualized. They also show the classifiction of singular points.
Not sure what would be a good way to find the curve. Could try computing a circle by integrating the geodesic equations in different directions, but this would probably produce a nonuniform distribution of direction, I guess could generate the directions in the tangent space uniformly and the map them back onto the surface or could using the function that maps the angle to a direction somehow idk.


https://en.wikipedia.org/wiki/Differential_geometry_of_surfaces {
	
}


Classification of singular points of a curve by dividing the curve into octants defined by the moving trihedron (planes of the frenet serret frame) and checking in which direction the curve comes in and come out of.
There are also double points, points the are isolated (for example in implicit functions) and points where the curve ends.

Osculating sphere

The principal curvatures at non singular points define a vector field. It is possible to construct and net or a coordinate system that follows the principal curvatures. At points that are too symmetric every direction is a principal direciton so this doesn't work these points are called umbillic. The principal directions are perpendicular so the curves also form right angles. They form an orthogonal net. Darboux frame

In some cases the asymptotic lines also form an otrhogonal net.

https://en.wikipedia.org/wiki/Orthogonal_coordinates

{
	Walking on 4D surfaces. Could be klein bottle or projective plane. Could use Q and E for moving in the 4th dimension. 
	
	Don't think these visualizations are going to be very instructive, because for visualization of a surface in 4d there are 2 options: projection and slices.
	Slices don't make sense for walking, because a slice the user is on may disapper. 
	For projection there needs to be a 4d embedding (if it's not an embedding then it doesn't really show anything new) of the shape. The issue is that the projections of the classic embeddings have a lot of self intersections and it's hard to tell what is going on. Another minor issue is that they have pinch singularities.
}

Make 2 vector field flows for the 2 principal directions.

Visualization of various methods of construction of shapes like for example ruled surfaces.

Morse theory.

PDEs on manifolds.

Visualizations from projective gometry

Computing a minimal surface given some form of constraint.

classification of surface singularities
https://en.wikipedia.org/wiki/Du_Val_singularity
http://www-sop.inria.fr/galaad/surfaces/classification/index.html
https://en.wikipedia.org/wiki/Acnode
https://en.wikipedia.org/wiki/Crunode
https://en.wikipedia.org/wiki/Cusp_(singularity)
https://en.wikipedia.org/wiki/Tacnode
https://en.wikipedia.org/wiki/Catastrophe_theory

https://en.wikipedia.org/wiki/Dupin_indicatrix

https://en.wikipedia.org/wiki/Slice_knot#Cone_construction

Elliptic space

Some minimal surfaces are defined in terms of integrals. To evaluate them could precompute the values and interpolate them.

Minimal number of colors to color a map.


https://virtualmathmuseum.org/Surface/klein_bottle/klein_bottle.html

Make a curve editor using differentiable splines and then allow walking on the surface.

VR

Parkour in (hyperbolic space) x R.

Graph torsion and curvature as functions of t.



https://en.wikipedia.org/wiki/Curvature#Curvature_comb
https://en.wikipedia.org/wiki/Evolute